#+AUTHOR:    Евгений Погребняк
#+TITLE:     Learning Emacs Org-Mode
#+EMAIL:     e.pogrebnyak@gmail.com
#+SEQ_TODO:  MAYBE(m) QUESTION(q) TODO(t) DOING(d) DELEGATED(e) WAITING(w) | DONE(+) CANCELLED(c) SOMEDAY(s)
#+ARCHIVE:   ARCHIVE.org::
#+OPTIONS:   toc:3

In this file I add new things I learn about Emacs and orgmode.
=QUESTION= and =#FIXME= mark section where help is needed.

# FIMXE: long load time (check too many packages)

* Starting Emacs

** Options to run Emacs

Pure Windows - Windows executable (not WSL, just from shell):
  - =emacs.exe= starts GUI (Russian font ok, preferred option) 
  - =emacs.exe -nw= for text mode
  - =runemacs.exe= (runs GUI, has issue with bad Russian font spacing)

WSL:
  - WSL in terminal (cmder) with bash (Ubuntu)
  - XServ graphics (X410) - pipeline to start a bit complex

VSCode extension:
  - syntax highlighing and some commands
  - no agenda view

Mobile:
  - Android + Termux + Emacs (You will probably need something like Hacker's Keyboard to input the shortcuts effectively)
  - Orgzly

# FIXME - exclude this from html output
:NOTE:
Console vs teminal vs shell.
:END:

** Basic pipeline

  - Install emacs on WSL with =sudo apt-get install emacs= 
  - Launch emacs with =emacs -nw <FILENAME.org>= command
  - Open a file with F10 - File menu
  - Edit file
  - Save file *C-x C-s*
  - Exit Emacs *C-x C-c*

** Improvements and changes

*** Configure terminal to avoid key conflicts

Must configure terminal to resolve 
[[https://emacs.stackexchange.com/questions/68105/how-to-use-ctrl-c-on-wsl-key-binding-conflict][key binding conflicts]] 
like Ctrl-C.
 
*** Set =org-support-shift-select= 
  - Selection with Shift is already built-in part of Emacs, but not org-mode
  - Start with 'M-x customize' to find options about Shift selection

*** Set CUA option in F10 menu
  - Set CUA (Ctrl-Z/X/C/V) as part of F10 menu with Enter
  - Save options

*** Where is the config?
  
Use just one, any of them:
  - ~/.emacs is a config file
  - ~/.emacs.d is a directory with init.el config file


*** Using X410 video system                                       

  - [[https://emacsredux.com/blog/2020/09/23/using-emacs-on-windows-with-wsl2/][Original article with X410 recommendation]] 
  - On WSL 1 works at [[https://x410.dev/cookbook/wsl/using-x410-with-wsl2/][127.0.0.1]]
  - X410 is available form Windows Store (USD10 with discount), 
    it saves a ton of time for configuration, including the fonts.

*** Change keyboard layout in X410 
    
  - [[https://x410.dev/cookbook/keyboard-layout/][Selecting a Keyboard Layout]]
  - This page details the use of the =setxkbmap= command to set X410 keyboard layout. By example, to set keyboard layout to Russian, the command is =setxkbmap ru=.

*** Avoid screen with tutorial 

Kill it with *C-x 1* or try =(setq inhibit-splash-screen t)=.

* Using Emacs

** Make a selection, copy and paste selection 

You can configure orgmode to use Shift-arrows for selection
with =org-support-shift-select=.

** QUESTION [C] Finding and replacing text

Unsure how it works on emacs, is it C-s? What about replace?
Please recommend some tutorial on this?

** QUESTION [C] Working with windows 

I currently use <Remove other windows> from File menu.
Maybe I can do better.

** How to select a vertical block of text?

- Similar to Alt-Shift-arrows in Notepad++:

  [[https://stackoverflow.com/questions/25065328/how-select-a-rectangle-in-emacs][How to select a rectangle in emacs]]
  Most voted answer (53 votes) said that *C-x SPC* starts =rectangle-mark-mode= that is similar to the functionality you request from Notepad++, but with all the operations available to Emacs. The selected rectangle can be copied with *M-w* or killed with *C-w*, by example.
  More information [[http://emacsredux.com/blog/2014/01/01/a-peek-at-emacs-24-dot-4-rectangular-selection/][here]].

- Multiline cursor for editing (similar to ctrl-alt-arrow in VS Code):
  https://emacs.stackexchange.com/questions/751/fundamentals-of-multiple-cursors

** Run bash

=M-X shell=

** How to move across buffers?

  - *C-x o* move to the other window
  - *C-x 1* maximixe current buffer
  - *C-x 2* split current window vertically
  - *C-x 3* split current window horizontally
  - *C-x b* ask for the name of a buffer and display it in current window
  - *C-x B* split current window and show a buffer list in the other window
  - *C-x B* split current window and show a buffer list in the other window
  - *C-x k* kills buffer

** QUESTION [B] How to run some command from a command line?

Imagine I needed something like 

~emacs README.md --run "C-c C-e h h"

How would it do it? Using emacs lisp?

** Refresh file from disk

The command is *M-x revert-buffer* 
([[https://emacs.stackexchange.com/questions/169/how-do-i-reload-a-file-in-a-buffer][details]]).

** QUESTION Is there somethign similar to prettier or black code formatter for org files?

=M-x revert-buffer=

* Using orgmode

** <TAB> is all you need

  - TAB shows/hides headers (quite powerful!)
  - Shift-TAB opens all headers 

** Getting around headers

  - Alt + left or right changes header level
  - Alt + up or down moves lines around
  - Shift - arrow: 
    - changes list numbering style
    - cycles TODO-DONE in header
    - selects in CUA mode

**** WAITING Move line across headers beyond own section 

  - Alt - arrow has limits within a header  
  - In VS Code Alt Up/Down move line wherever
  - Is there some key combination that moves lines across file
  - Currently using C-k C-y
  - Shift-Arrow-Up/Down maybe?
  - https://emacs.stackexchange.com/questions/68140/unrestricted-movement-of-lines-alt-up-down

** Create a hyperlink
   :PROPERTIES:
   :CUSTOM_ID: hyperlink_target
   :END:
# FIXME: The above does not seem to an <a > anchor

 - Use =[[url][]]= syntax or C-c C-l
 - Internal [[#hyperlink_target][hyperlink here]]
 - Or [[file:ARCHIVE.org][link to file]]
 - [[https://gist.github.com/will-henney/d8564133e07e546789c0][Link example]]

** Use timestamps

  SCHEDULED: <2021-08-15 Sun>

  As [[https://orgmode.org/guide/Creating-Timestamps.html#Creating-Timestamps][guide]] suggests:

    - *C-c .* for active date-only timestamp (Active = it creates an entry on Org agenda)
    - *C-c !* for inactive date-only timestamp (Inactive = it doesn't create entries on Org agenda)
    - *S-arrow* for change

**** QUESTION [A] How to put a timestamp with time, not just date?
    - *C-u C-c .* and *C-u C-c !* for timestamp including date and time, active and inactive respectively

** Checkboxes

    - You must type [0/0] or [0%] for checkbox
    - Only X counts for completion, not `x` or `+`
    - C-c C-c toggles and recalculates
    - QUESTION: what can recalculate on its own?
    - Check Rainer König video [[https://www.youtube.com/watch?v=gvgfmED8RD4&list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&index=5&t=444s][OrgMode E01S05: Checklists]]

    Sample checkbox list [2/3], [66%]:

      - [X] Item 1
      - [X] Item 2
      - [ ] Item 3
       
** Agenda

    - Use F10 and menu for agenda view
 
**** C-c a
Why is C-c a undefined? Shoud I define it?

Seems to be undefined by default, but [[https://orgmode.org/guide/Introduction.html#Activation][this page of the Org mode guide]] says that with =(global-set-key (kbd "C-c a") 'org-agenda)= can be set. 
If the keyboard shortcut isn't activated, 
you can activate the agenda view manually with *M-x org-agenda*.

**** How to sort agenda by priority?

[[https://emacs.stackexchange.com/questions/32430/how-to-sort-habits-by-priority-in-the-org-agenda-view][This Emacs Stackexchange question]] shows Emacs-Lisp code to make sorting by priority the default in agenda view
#+BEGIN_SRC emacs-lisp
	(defun hw-org-agenda-sort-habits (a b)
	  "Sort habits first by user priority, then by schedule+deadline+consistency."
	  (let ((ha (get-text-property 1 'org-habit-p a))
		(hb (get-text-property 1 'org-habit-p b)))
	    (when (and ha hb)
	      (let ((pa (org-get-priority a))
		    (pb (org-get-priority b)))
		(cond ((> pa pb) +1)
		      ((< pa pb) -1)
		      ((= pa pb) (org-cmp-values a b 'priority)))))))
	(setq org-agenda-cmp-user-defined 'hw-org-agenda-sort-habits
	      org-agenda-sorting-strategy '((agenda time-up user-defined-down habit-down)
					    (todo priority-down category-keep)
					    (tags priority-down category-keep)
										(search category-keep)))
#+END_SRC

****  How to close agenda buffer?

In Emacs you close a buffer with *C-x k*

** Clocking
    :LOGBOOK:
    CLOCK: [2021-08-16 Mon 14:29]--[2021-08-16 Mon 14:35] =>  0:06
    :END:

    *** Clock this!
    - Start: C-c C-x C-i
    - End: C-c C-x C-o

 #+BEGIN_QUOTE
    It is easy to “clock-in” to a particular task by positioning point within an item 
    and typing C-c C-x C-i and clocking out with C-c C-x C-o.
 #+END_QUOTE

    https://www.adventuresinwhy.com/post/org-mode-timekeeping/


**** What are useful habit with clocking? Does pomodoro help?
  
SJ: In the same way the body cannot sustain 
exercise indefinitely, but needs to rest after a period 
of sustained effort, so does the brain. So pomodoro is a good practice, 
but you need to tailor the focus and rest 
periods to your personal optimum./
   
** Table

 - Start table from menu
 - C-c C-c to format

** QUESTION Calendar

How to view calendar (it was popping up accidantally when I hit something wrong).

** Other actions

    - Sort this list is C-c ^
    - Add cycling todo tags =#+SEQ_TODO:= 
    - Archive tasks through Org menu
    - Defintion list with =::= separator
    - Github search for org files with =[[https://github.com/search?o=asc&q=language%3Aorg&s=indexed&type=Code][language:org]]=
    - C-k C-y can move lines

* Useful scenarios

What are productive scenarios for using org-mode?

-[[https://www.reddit.com/r/emacs/comments/42qr9h/orgmode_for_gtd/d0fupy5?utm_source=share&utm_medium=web2x&context=3][ @Trevoke via reddit]]:

#+BEGIN_QUOTE
The best advice I've heard for using org-mode in some sort of GTD system 
was not to try and set up categories when you start. 
Start with just a bunch of TODOs, and slowly grow the system as you feel the need to.
#+END_QUOTE

SJ:
- As a general notebook for brainstorming and keeping interesting ideas at hand.
- Org mode can execute code in several programming languages, so it can also be used to automate tasks that require collections of scripts.
- It can even be used as database client for SQL databases, and the result of SQL queries can be shown in Org tables.
- To measure your productivity by tabulating hourly, weekly, daily views on your clock-ins and clock-outs.
- Alongside existing productivity methodologies like GTD

* Reference

** Concepts

 - buffer :: a screen that represents a file or Emacs own output
 - frame :: is a new window for the whole program
 - modeline :: a line at the bottom of a screen with something like =-UUU(DOS)**--F1=
 - window :: is a windows inside editor

** Notation

  - * is a header  
  - drawer box has :NAME: and :END:

* Links

# FIXME: add links from mobile search history

** Videos

New:

 - https://cestlaz.github.io/stories/emacs/

Essential:

 - [[https://www.youtube.com/watch?v=oJTwQvgfgMM][Carsten Dominik keynote (2008)]]
 - [[https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][Rainer König lesson series]]

Extension:

 - [[https://www.youtube.com/watch?v=JWD1Fpdd4Pc][Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs]]
 - [[https://www.youtube.com/watch?v=ZbxUJz6a9Io][Andrew Tropin - Modern Emacs (2021)]]

Academic:

 - [[https://arxiv.org/abs/2008.06030][On the design of text editors]]

** Blogs and success stories
   
 - https://sachachua.com/blog/2014/01/tips-learning-org-mode-emacs/
 - https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html

**** CANCELLED [C] add images from sachachua.com
**** CANCELLED [C] redraw mindmap to simplify

** Orgfiles on github

 - https://github.com/abcdw/notes/blob/master/notes/20210805075718-the_modern_emacs.org
 - https://github.com/zkat/sheeple/blob/5393c74737ccf22c3fd5f390076b75c38453cb04/presentation/sheeple-talk-22-10-09.org
 - https://raw.githubusercontent.com/ymd-h/cpprb/c44cf5d53f807e58f71d1a2e1cf46aa92b5e193d/README.org
 - https://raw.githubusercontent.com/deopurkar/ag2021/f73c35fede17a123806102306ce0c47bc2a87cd9/course.org
 - https://raw.githubusercontent.com/Literate-DevOps/literate-programming-tutorials/0dcff18ae2047fb46df1edc2cde7b2ea0cb57a12/how-to/01-assassinate-the-archbishop-of-canterbury-in-1170-ce/how-to-assassinate-the-archbishop-of-canterbury-in-1170-ce.org

* Out of scope

I try to avoid more complicated topics:

- packages and complex configuration
- programming in lisp
- spacemacs, emacs-doom and similar
# Fixme - add link to emacs survey resul answers
- org-roam
- org-capture
- email with gnus
- git with magit 
- export to latex and beamer
	      
* Appendix. 

** Key binding cheatsheet

| Command       | Action                |
|---------------+-----------------------|
| M-x <command> | Run command by name   |
| M-x shell     | Run Shell             |
| F10           | Upper menu            |
| C-s           | Advanced search       |
| C-c C-c       | Toggle or recalculate |
| C-k C-y       | Kill and undo line    |
| C-c C-e h h   | Create HTML           |
| C-x 1         | Remove window         |
| *Way out*     |                       |
| C-g           | Kill, stop or exit    |
| ESC-ESC-ESC   | Exit (hopefully)      |
| q             | Exit (sometimes)      |
| *Not Emacs:*  |                       |
| Fn-Esc        | Lock Fn key (Lenovo)  |

** Emacs commands

M-x:
 - revert-buffer (in File menu)
 - customize
 - shell
 - query-replace-regexp (asks for a regular expression, replaces it, it is very powerful to automate editing tasks)
